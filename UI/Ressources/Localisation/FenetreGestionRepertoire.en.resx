<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Ajout" xml:space="preserve">
    <value>Add</value>
  </data>
  <data name="AjoutAliment" xml:space="preserve">
    <value>Add a meal</value>
  </data>
  <data name="AjouterAliment" xml:space="preserve">
    <value>Add the meal</value>
  </data>
  <data name="AjouterImage" xml:space="preserve">
    <value>Add a picture</value>
  </data>
  <data name="AjoutPlatBreuvage" xml:space="preserve">
    <value>Add a meal / beverage</value>
  </data>
  <data name="Aliment" xml:space="preserve">
    <value>Food</value>
  </data>
  <data name="AlimentDispoGroupe" xml:space="preserve">
    <value>Food available by group</value>
  </data>
  <data name="CategorieAlimentaire" xml:space="preserve">
    <value>Food category</value>
  </data>
  <data name="CategorieVide" xml:space="preserve">
    <value>Food category (None selected)</value>
  </data>
  <data name="Cholesterol" xml:space="preserve">
    <value>Cholesterol (mg)</value>
  </data>
  <data name="CompositionPlat" xml:space="preserve">
    <value>Meal composition</value>
  </data>
  <data name="CompositionVide" xml:space="preserve">
    <value>Meal composition (No food)</value>
  </data>
  <data name="ConfirmerAjout" xml:space="preserve">
    <value>Confirm the addition</value>
  </data>
  <data name="ConfirmerModification" xml:space="preserve">
    <value>Confirm the modification</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="Energie" xml:space="preserve">
    <value>Energy (calories)</value>
  </data>
  <data name="ErreurMessage" xml:space="preserve">
    <value>There are one or more invalid fields</value>
  </data>
  <data name="ErreurTitre" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Fibre" xml:space="preserve">
    <value>Fiber (g)</value>
  </data>
  <data name="GestionAlimentPlat" xml:space="preserve">
    <value>Management of food and meals</value>
  </data>
  <data name="Glucide" xml:space="preserve">
    <value>Carbogydrates (g)</value>
  </data>
  <data name="Lipide" xml:space="preserve">
    <value>Lipids (g)</value>
  </data>
  <data name="MesureBorne" xml:space="preserve">
    <value>Measurement portion (1 to 500)</value>
  </data>
  <data name="MesureInvalide" xml:space="preserve">
    <value>Measurement portion (digital whole)</value>
  </data>
  <data name="MesurePortion" xml:space="preserve">
    <value>Measurement portion</value>
  </data>
  <data name="MesureVide" xml:space="preserve">
    <value>Measurement portion (Empty field)</value>
  </data>
  <data name="Modification" xml:space="preserve">
    <value>Modify</value>
  </data>
  <data name="ModificationAliment" xml:space="preserve">
    <value>Modify food</value>
  </data>
  <data name="ModificationPlatBreuvage" xml:space="preserve">
    <value>Modify a meal / beverage</value>
  </data>
  <data name="ModifierAliment" xml:space="preserve">
    <value>Modify the food</value>
  </data>
  <data name="NomAliment" xml:space="preserve">
    <value>Name of the food</value>
  </data>
  <data name="NomAlimentDebut" xml:space="preserve">
    <value>Name of the food (Must begin with a letter)</value>
  </data>
  <data name="NomAlimentInvalide" xml:space="preserve">
    <value>Name of the food (Invalid caracters)</value>
  </data>
  <data name="NomAlimentTaille" xml:space="preserve">
    <value>Name of the food (Between 1 and 50 caracters)</value>
  </data>
  <data name="NomAlimentUnique" xml:space="preserve">
    <value>Name of the food (Food already exists)</value>
  </data>
  <data name="NomAlimentVide" xml:space="preserve">
    <value>Name of the food (Empty field)</value>
  </data>
  <data name="NomPlat" xml:space="preserve">
    <value>Name of the meal</value>
  </data>
  <data name="NomPlatDebut" xml:space="preserve">
    <value>Name of the meal (Must begin with a letter)</value>
  </data>
  <data name="NomPlatInvalide" xml:space="preserve">
    <value>Name of the meal (Invalid caracters)</value>
  </data>
  <data name="NomPlatTaille" xml:space="preserve">
    <value>Name of the meal (Between 1 and 50 caracters)</value>
  </data>
  <data name="NomPlatUnique" xml:space="preserve">
    <value>Name of the meal (Meal already exists)</value>
  </data>
  <data name="NomPlatVide" xml:space="preserve">
    <value>Name of the meal (Empty field)</value>
  </data>
  <data name="PlatBreuvage" xml:space="preserve">
    <value>Meal / Beverage</value>
  </data>
  <data name="Proteine" xml:space="preserve">
    <value>Protein (g)</value>
  </data>
  <data name="RechercherAliment" xml:space="preserve">
    <value>Search for food</value>
  </data>
  <data name="RechercherAlimentAucun" xml:space="preserve">
    <value>Search for food (Nothing found)</value>
  </data>
  <data name="RechercherPlat" xml:space="preserve">
    <value>Search for a meal</value>
  </data>
  <data name="RechercherPlatAucun" xml:space="preserve">
    <value>Search for a meal (Nothing found)</value>
  </data>
  <data name="Sodium" xml:space="preserve">
    <value>Sodium (mg)</value>
  </data>
  <data name="SuccessAjoutAlimentMessage" xml:space="preserve">
    <value>The new food has been successfully added to the database.</value>
  </data>
  <data name="SuccessAjoutAlimentTitre" xml:space="preserve">
    <value>New food added</value>
  </data>
  <data name="SuccessAjoutPlatMessage" xml:space="preserve">
    <value>The new meal has been successfully added to the database.</value>
  </data>
  <data name="SuccessAjoutPlatTitre" xml:space="preserve">
    <value>New meal added</value>
  </data>
  <data name="SuccessModifAlimentMessage" xml:space="preserve">
    <value>The food has been successfully modified from the database.</value>
  </data>
  <data name="SuccessModifAlimentTitre" xml:space="preserve">
    <value>Food modification successfull</value>
  </data>
  <data name="SuccessModifPlatMessage" xml:space="preserve">
    <value>The meal has been successfully modified from the database.</value>
  </data>
  <data name="SuccessModifPlatTitre" xml:space="preserve">
    <value>Meal modification successfull</value>
  </data>
  <data name="Titre" xml:space="preserve">
    <value>Nutritia - Management of food and meals</value>
  </data>
  <data name="TypePlat" xml:space="preserve">
    <value>Meal type</value>
  </data>
  <data name="TypeVide" xml:space="preserve">
    <value>Meal type(None selected)</value>
  </data>
  <data name="UniteMesure" xml:space="preserve">
    <value>Unit of measure</value>
  </data>
  <data name="UniteMesureVide" xml:space="preserve">
    <value>Unit of measure (None selected)</value>
  </data>
  <data name="ValeurNutritionnelleIrreel" xml:space="preserve">
    <value>Nutritional values (Impossible total)</value>
  </data>
  <data name="ValeurNutritionnelles" xml:space="preserve">
    <value>Nutritional values</value>
  </data>
</root>